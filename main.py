# file version 0.1 fo4
import subprocess
import requests

try:
    from settings import *

    if fileversion != "0.2.dl":
        int('r')
except:
    print("settings.py not found or file version wrong. creating...")
    with open("settings.py", "w") as f:
        f.write("""
#DO NOT EDIT THIS ENTRY
#This file is automatically generated by the cleaner.
#if this entry is edited, the cleaner will rewirite the entiere settings.py file
# updated from 0.2 to 0.2.dl
fileversion = "0.2.dl"


#path to Game root directory
#default: C:\Program Files (x86)\Steam\steamapps\common\Fallout 4
# hint: do not use "\\" in the path ... use \\\\ instead
path = "E:\\\\SteamLibrary\\\\steamapps\\\\common\\\\Fallout 4"

#data directory
#default: C:\Program Files (x86)\Steam\steamapps\common\Fallout 4\Data
# or short: path + "\\\\Data"
# use \\\\ instead of "\\"
data = path + "\\Data"


##download section##
#if you dont understand the code....
#    DONT TOUCH THIS!
download_urls = []  #  list with raw urls
download_types = [] #  list with types... possible are ["var", "file"]
download_names = [] #  list with names for type file

# in this files are the files that need to be copied / cleaned stored as a list
# example for sse:
# master_list = "master_list.txt" > ["Skyrim.esm", "Update.esm", "HearthFires.esm", "Dragonborn.esm", "Dawnguard.esm"]
# clean_list = "clean_list.txt" > [ "Update.esm", "HearthFires.esm", "Dragonborn.esm", "Dawnguard.esm"]
clean_list = "clean_masterlist.txt"


# path to F04Edit
# use \\\\ instead of "\\"
# path + executable file name (c:\\.....\\F04Edit.exe)
xedit = "C:\\\\Program Files (x86)\\\\FO4Edit\\\\FO4Edit.exe"

# game
# please set your game here or it will be tryed to use the name of xedit....
# here are the inforemation from official documentation... (i hope its right...)
# â€¢  -<gamemode> can be any of the following: ['tes5vr', 'fo4vr', 'tes4', 'tes5', 'enderal', 'sse', 'fo3', 'fnv', 'fo4', 'fo76']
# example
# game="-fo3"
game = ""

""")
    print("settings.py created. please edit it and run the script again.")
    exit()
CleanFileList = []
DEBUG = False


def dprint(string):
    if DEBUG:
        print(string)


def downloader():
    if download_urls != []:
        dprint("Download Urls list is NOT EMPTY...")
        dprint("Downloading")
        dprint("")
        dprint("")
        for i in range(len(download_urls)):
            URL = download_urls[i]
            dprint("URL:" + URL)
            response = requests.get(URL)
            dprint("Name:" + download_names[i])
            dprint("")
            open(download_names[i], "wb").write(response.content)
    else:
        dprint("Download Urls list IS EMPTY...")
        dprint("Skipped...")
    dprint("")


def loadTxt():
    global CleanFileList
    dprint("content:")
    dprint("")
    with open(clean_list, "r") as file:
        for line in file:
            dprint(line.strip())
            CleanFileList.append(line.strip())


def SSEEDIT():
    global data, xedit, game
    for ESMFile in CleanFileList:
        print("cleaning " + ESMFile + "...")
        if game != "":
            args = f'{xedit} -quickautoclean -autoexit -autoload "{ESMFile}" -D:"{data}" {game}'
        else:
            args = f'{xedit} -quickautoclean -autoexit -autoload "{ESMFile}" -D:"{data}"'
        print(args)
        subprocess.call(args, shell=False)


# legacy function not in use
def cleanNames(CleanFileList):
    x = []
    for ESMFile in CleanFileList:
        if ESMFile.find(" ") != -1:
            x.append(f'\"{ESMFile}\"')
        else:
            x.append(ESMFile)
    return x


if __name__ == '__main__':
    print("start downloader")
    dprint("")
    downloader()
    print("done")
    print()
    print("loading " + clean_list)
    dprint("")
    loadTxt()
    print("done")
    print()
    ## disabled
    # print(CleanFileList)
    # print(path)

    # print(CleanFileList)
    SSEEDIT()
